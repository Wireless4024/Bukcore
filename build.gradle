import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id "org.jetbrains.kotlin.jvm" version "1.4.10"
}

apply plugin: 'java'
apply plugin: 'kotlin'

group = 'com.wireless4024.mc'
version = '0.3'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
	mavenCentral()
	maven {
		name = 'spigotmc-repo'
		url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
	}
	maven {
		name = 'sk89q-repo'
		url = 'https://maven.enginehub.org/repo/'
	}
	maven {
		name = 'codemc-repo'
		url = 'https://repo.codemc.org/repository/maven-public/'
	}
	maven {
		name = "dmulloy2-repo"
		url = "https://repo.dmulloy2.net/nexus/repository/public/"
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
task fatJar(type: Jar, dependsOn: jar) {
	classifier = 'full'
	// from(sourceSets.main.resources)
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() || !it.name.endsWith('.jar') ? it : zipTree(it) }
	}
	with jar
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

/********************************/
// plugin version
def bukkit = "1.12-R0.1-SNAPSHOT"
/********************************/

dependencies {
	compileOnly 'org.bukkit:bukkit:' + bukkit
	compileOnly 'com.sk89q.worldedit:worldedit-bukkit:6.1.5'
	compileOnly 'com.sk89q.worldguard:worldguard-legacy:6.2'
	compileOnly 'de.tr7zw:item-nbt-api-plugin:2.5.0'
	compileOnly 'com.comphenix.protocol:ProtocolLib:4.5.0'
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.10"
	//  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
	testCompile 'org.junit.jupiter:junit-jupiter:5.7.0-M1'
	// provided by bukkit but not included in our test
	testCompile 'com.google.code.gson:gson:2.8.0'
}

processResources {
	from(sourceSets.main.resources.srcDirs) {
		filter ReplaceTokens, tokens: [version: version]
	}
}
compileKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

task all {
	dependsOn 'jar'
	dependsOn 'fatJar'
	dependsOn 'sourcesJar'
}
task jarTo {
	dependsOn 'clean'
	dependsOn 'fatJar'
	doLast {
		if (project.hasProperty('to')) {
			if (copy {
				from(fatJar.archivePath)
				into(to)
			}.didWork)
				print("ok?")
			else {
				print("didn't?")
			}
		}
	}
}
test {
	useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile)
		.all {
			kotlinOptions {
				freeCompilerArgs += [
						'-Xno-call-assertions',
						'-Xno-receiver-assertions',
						'-Xinline-classes',
						'-Xno-param-assertions',
						'-Xassertions=jvm'
				]
			}
		}